!function(t){function e(e){for(var a,s,o=e[0],r=e[1],c=e[2],u=0,h=[];u<o.length;u++)s=o[u],Object.prototype.hasOwnProperty.call(l,s)&&l[s]&&h.push(l[s][0]),l[s]=0;for(a in r)Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a]);for(d&&d(e);h.length;)h.shift()();return i.push.apply(i,c||[]),n()}function n(){for(var t,e=0;e<i.length;e++){for(var n=i[e],a=!0,o=1;o<n.length;o++){var r=n[o];0!==l[r]&&(a=!1)}a&&(i.splice(e--,1),t=s(s.s=n[0]))}return t}var a={},l={0:0},i=[];function s(e){if(a[e])return a[e].exports;var n=a[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.e=function(t){var e=[],n=l[t];if(0!==n)if(n)e.push(n[2]);else{var a=new Promise((function(e,a){n=l[t]=[e,a]}));e.push(n[2]=a);var i,o=document.createElement("script");o.charset="utf-8",o.timeout=120,s.nc&&o.setAttribute("nonce",s.nc),o.src=function(t){return s.p+""+t+".app.bundle.js"}(t);var r=new Error;i=function(e){o.onerror=o.onload=null,clearTimeout(c);var n=l[t];if(0!==n){if(n){var a=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;r.message="Loading chunk "+t+" failed.\n("+a+": "+i+")",r.name="ChunkLoadError",r.type=a,r.request=i,n[1](r)}l[t]=void 0}};var c=setTimeout((function(){i({type:"timeout",target:o})}),12e4);o.onerror=o.onload=i,document.head.appendChild(o)}return Promise.all(e)},s.m=t,s.c=a,s.d=function(t,e,n){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)s.d(n,a,function(e){return t[e]}.bind(null,a));return n},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s.oe=function(t){throw console.error(t),t};var o=window.webpackJsonp=window.webpackJsonp||[],r=o.push.bind(o);o.push=e,o=o.slice();for(var c=0;c<o.length;c++)e(o[c]);var d=r;i.push([73,3]),n()}({19:function(t,e,n){var a=n(10);t.exports=(a.default||a).template({compiler:[7,">= 4.0.0"],main:function(t,e,n,a,l){var i,s=null!=e?e:t.nullContext||{},o=n.helperMissing,r=t.escapeExpression;return'<div class="uk-section uk-section-xsmall uk-background-muted uk-padding-remove-top uk-padding-remove-bottom uk-box-shadow-small tm-main" uk-sticky="media:640">\n\t<div class="uk-container uk-container-expand uk-text-center">\n\n\t\t<div id="small-title" class="uk-clear-fix uk-margin-top" hidden>\n\t\t\t<h4 class="uk-h4 uk-margin-remove-bottom">'+r("function"==typeof(i=null!=(i=n.title||(null!=e?e.title:e))?i:o)?i.call(s,{name:"title",hash:{},data:l}):i)+": "+r("function"==typeof(i=null!=(i=n.subtitle||(null!=e?e.subtitle:e))?i:o)?i.call(s,{name:"subtitle",hash:{},data:l}):i)+'</h4>\n\t\t</div>\n\t\n\t\t<div id="current-view">\n\t\t\t<p class="uk-margin-top uk-text-lead">\n                    '+r("function"==typeof(i=null!=(i=n.currentTerm||(null!=e?e.currentTerm:e))?i:o)?i.call(s,{name:"currentTerm",hash:{},data:l}):i)+" | "+r("function"==typeof(i=null!=(i=n.currentPeriod||(null!=e?e.currentPeriod:e))?i:o)?i.call(s,{name:"currentPeriod",hash:{},data:l}):i)+"\n\t\t\t</p>\n\t\t</div>\n\t</div>\n</div>"},useData:!0})},25:function(t,e,n){var a=n(10);t.exports=(a.default||a).template({compiler:[7,">= 4.0.0"],main:function(t,e,n,a,l){var i,s=null!=e?e:t.nullContext||{},o=n.helperMissing,r=t.escapeExpression;return'<div class="uk-section uk-padding-small tm-main">\n\t<div class="uk-container uk-container-small uk-text-center">\n\t\t<h1 class="uk-heading-primary">'+r("function"==typeof(i=null!=(i=n.title||(null!=e?e.title:e))?i:o)?i.call(s,{name:"title",hash:{},data:l}):i)+'\n\t\t<br/><span class="uk-h2">'+r("function"==typeof(i=null!=(i=n.subtitle||(null!=e?e.subtitle:e))?i:o)?i.call(s,{name:"subtitle",hash:{},data:l}):i)+"</span></h1>\n\t</div>\n</div>"},useData:!0})},26:function(t,e,n){var a=n(10);t.exports=(a.default||a).template({1:function(t,e,n,a,l){var i,s=null!=e?e:t.nullContext||{},o=n.helperMissing,r=t.escapeExpression;return'\t\t\t<li><a class="side-bar-item" slug="'+r("function"==typeof(i=null!=(i=n.slug||(null!=e?e.slug:e))?i:o)?i.call(s,{name:"slug",hash:{},data:l}):i)+'">'+r("function"==typeof(i=null!=(i=n.name||(null!=e?e.name:e))?i:o)?i.call(s,{name:"name",hash:{},data:l}):i)+"</a></li>\n"},compiler:[7,">= 4.0.0"],main:function(t,e,n,a,l){var i,s,o,r=null!=e?e:t.nullContext||{},c=n.helperMissing,d='<div class="tm-sidebar-left">\n\t<div id="main-menu">\n\t\t<ul class="uk-nav uk-nav-default" uk-switcher>\n\t\t\t <p class="uk-text-lead">'+t.escapeExpression("function"==typeof(s=null!=(s=n.sideBarTitle||(null!=e?e.sideBarTitle:e))?s:c)?s.call(r,{name:"sideBarTitle",hash:{},data:l}):s)+"</p>\n";return s=null!=(s=n.terms||(null!=e?e.terms:e))?s:c,o={name:"terms",hash:{},fn:t.program(1,l,0),inverse:t.noop,data:l},i="function"==typeof s?s.call(r,o):s,n.terms||(i=n.blockHelperMissing.call(e,i,o)),null!=i&&(d+=i),d+'\t\t</ul>\n\t</div>\n\t\n\t<div id="footer-section" class="uk-section uk-section-xsmall">\n\t\t<div class="uk-container uk-container-small uk-text-small uk-text-center">\n\t\t\t<hr class="uk-divider-small">\n\t\t\t<p class="uk-text-muted">Developed by<br/><a href="http://luciano.fluxo.art.br" target="_blank" rel=noreferrer class="uk-link-text">Luciano Frizzera</a></p>\n\t\t</div>\n\t</div>\n</div>'},useData:!0})},27:function(t,e,n){var a=n(10);t.exports=(a.default||a).template({compiler:[7,">= 4.0.0"],main:function(t,e,n,a,l){var i;return'<div class="uk-section tm-main">\n    <div class="uk-container">\n\n         <div uk-grid>\n            <div id=\'videos\' class=\'uk-width-1-2\'>\n                <h2 class="uk-h2 uk-text-center">'+t.escapeExpression("function"==typeof(i=null!=(i=n.title||(null!=e?e.title:e))?i:n.helperMissing)?i.call(null!=e?e:t.nullContext||{},{name:"title",hash:{},data:l}):i)+'</h2>\n                <div class="uk-text-small">\n                    <div class="spiner uk-position-absolute uk-transform-center uk-margin-large-bottom" uk-spinner="ratio: 1"></div>\n                    <div id="top-videos"></div>\n                </div>\n            </div>\n\n            <div id=\'channels\' class=\'uk-width-1-2\'></div>\n\n        </div>\n        \n    </div>\n    <hr>\n</div>'},useData:!0})},28:function(t,e,n){var a=n(10);t.exports=(a.default||a).template({compiler:[7,">= 4.0.0"],main:function(t,e,n,a,l){var i;return'\x3c!-- <div class="uk-section tm-main">\n    <div class="uk-container"> --\x3e\n        <h2 class="uk-h2 uk-text-center">'+t.escapeExpression("function"==typeof(i=null!=(i=n.title||(null!=e?e.title:e))?i:n.helperMissing)?i.call(null!=e?e:t.nullContext||{},{name:"title",hash:{},data:l}):i)+'</h2>\n        <div class="uk-text-small">\n            <div class="spiner uk-position-absolute uk-transform-center uk-margin-large-bottom" uk-spinner="ratio: 1"></div>\n            <div id="top-channels"></div>\n        </div>\n    \x3c!-- </div>\n    <hr>\n</div> --\x3e'},useData:!0})},29:function(t,e,n){var a=n(10);t.exports=(a.default||a).template({compiler:[7,">= 4.0.0"],main:function(t,e,n,a,l){var i,s=null!=e?e:t.nullContext||{},o=n.helperMissing,r=t.escapeExpression;return'<div class="uk-section uk-section-xsmall tm-main">\n    <div class="uk-container uk-container-expand">\n        <h2 class="uk-h2 uk-text-center">'+r("function"==typeof(i=null!=(i=n.title||(null!=e?e.title:e))?i:o)?i.call(s,{name:"title",hash:{},data:l}):i)+'</h2>\n        <div class="uk-text-center" uk-grid>\n            <div class="uk-width-auto"></div>\n            <div class="uk-width-expand">\n                <div class="spiner" uk-spinner="ratio: 1"></div>\n                <div id="rankflow-panel" class="uk-panel uk-overflow-auto">\n                    <div id="visualization"></div>\n                </div>\n                <div id="horizontal-scroll-hint" class="uk-text-meta uk-margin-medium-top" hidden>\n                    <p><span uk-icon="chevron-left"></span> '+r("function"==typeof(i=null!=(i=n.scrollText||(null!=e?e.scrollText:e))?i:o)?i.call(s,{name:"scrollText",hash:{},data:l}):i)+' <span uk-icon="chevron-right"></span></p>\n                </div>\n                <div id="modal-video-details" uk-modal></div>\n\n            </div>\n            <div class="uk-width-auto"></div>\n        </div>\n    </div>\n</div>'},useData:!0})},33:function(t,e,n){var a=n(10);t.exports=(a.default||a).template({1:function(t,e,n,a,l){var i,s=null!=e?e:t.nullContext||{},o=n.helperMissing,r="function",c=t.escapeExpression;return"                <tr>\n                    <td>"+c(typeof(i=null!=(i=n.date||(null!=e?e.date:e))?i:o)===r?i.call(s,{name:"date",hash:{},data:l}):i)+'</td>\n                    <td class="uk-text-right">'+c(typeof(i=null!=(i=n.views||(null!=e?e.views:e))?i:o)===r?i.call(s,{name:"views",hash:{},data:l}):i)+'</td>\n                    <td class="uk-text-right">'+c(typeof(i=null!=(i=n.likes||(null!=e?e.likes:e))?i:o)===r?i.call(s,{name:"likes",hash:{},data:l}):i)+'</td>\n                    <td class="uk-text-right">'+c(typeof(i=null!=(i=n.dislikes||(null!=e?e.dislikes:e))?i:o)===r?i.call(s,{name:"dislikes",hash:{},data:l}):i)+'</td>\n                    <td class="uk-text-right">'+c(typeof(i=null!=(i=n.nb_recommendations||(null!=e?e.nb_recommendations:e))?i:o)===r?i.call(s,{name:"nb_recommendations",hash:{},data:l}):i)+'</td>\n                    <td class="uk-text-right">'+c(typeof(i=null!=(i=n.recRank||(null!=e?e.recRank:e))?i:o)===r?i.call(s,{name:"recRank",hash:{},data:l}):i)+"</td>\n                </tr>\n"},compiler:[7,">= 4.0.0"],main:function(t,e,n,a,l){var i,s,o,r=null!=e?e:t.nullContext||{},c=n.helperMissing,d=t.escapeExpression,u=t.lambda,h='<div class="uk-modal-dialog">\n    <button class="uk-modal-close-default" type="button" uk-close></button>\n    <div class="uk-modal-header uk-background-muted">\n        <div class="uk-grid-small uk-flex-middle" uk-grid>\n            <div class="uk-width-expand">\n                <h3 class="uk-card-title uk-margin-remove-bottom">'+d("function"==typeof(s=null!=(s=n.title||(null!=e?e.title:e))?s:c)?s.call(r,{name:"title",hash:{},data:l}):s)+'</h3>\n                <p class="uk-text-meta uk-margin-remove-top">'+d("function"==typeof(s=null!=(s=n.channel||(null!=e?e.channel:e))?s:c)?s.call(r,{name:"channel",hash:{},data:l}):s)+'</p>\n            </div>\n        </div>\n    </div>\n    <div class="uk-modal-body uk-text-center">\n        <iframe width="540"\n                height="310"\n                src="https://www.youtube.com/embed/'+d("function"==typeof(s=null!=(s=n.youtubeID||(null!=e?e.youtubeID:e))?s:c)?s.call(r,{name:"youtubeID",hash:{},data:l}):s)+'"\n                frameborder="0"\n                allow="autoplay; encrypted-media"\n                allowfullscreen></iframe>\n    </div>\n    <div class="uk-modal-footer" uk-overflow-auto>\n        <table id="video-dates-details"\n                class="uk-table uk-table-small uk-table-hover uk-table-divider">\n            <thead>\n                <tr>\n                    <th class="">&nbsp;</th>\n                    <th class="uk-text-right">'+d(u(null!=(i=null!=e?e.statsLabel:e)?i.views:i,e))+'</th>\n                    <th class="uk-text-right">'+d(u(null!=(i=null!=e?e.statsLabel:e)?i.likes:i,e))+'</th>\n                    <th class="uk-text-right">'+d(u(null!=(i=null!=e?e.statsLabel:e)?i.dislikes:i,e))+'</th>\n                    <th class="uk-text-right">'+d(u(null!=(i=null!=e?e.statsLabel:e)?i.recommendations:i,e))+'</th>\n                    <th class="uk-text-right"><span class="uk-text-small">'+d(u(null!=(i=null!=e?e.statsLabel:e)?i.rankingPosition:i,e))+"</span></th>\n                </tr>\n            </thead>\n            <tbody>\n";return s=null!=(s=n.dates||(null!=e?e.dates:e))?s:c,o={name:"dates",hash:{},fn:t.program(1,l,0),inverse:t.noop,data:l},i="function"==typeof s?s.call(r,o):s,n.dates||(i=n.blockHelperMissing.call(e,i,o)),null!=i&&(h+=i),h+"            </tbody>\n        </table>\n    </div>\n</div>"},useData:!0})},53:function(t,e,n){},70:function(t,e,n){var a={"./methodology-en.hbs":[80,1],"./methodology-pt.hbs":[81,2]};function l(t){if(!n.o(a,t))return Promise.resolve().then((function(){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}));var e=a[t],l=e[0];return n.e(e[1]).then((function(){return n.t(l,7)}))}l.keys=function(){return Object.keys(a)},l.id=70,t.exports=l},73:function(t,e,n){"use strict";n.r(e);var a=n(13),l=n.n(a),i=n(0),s=n(4),o=n.n(s),r=n(24),c=n.n(r),d=(n(52),n(53),n(3)),u=n.n(d),h=(n(21),n(22),n(6)),m=n.n(h);var p={channelColours:["#9badf9","#f6a072","#3be6ea","#dd9fe9","#ebae64","#fa928f","#5abef6","#d0d875","#e565a4","#8fdc8c"]};const f={videos:[],channels:[],topChannels:[]},v={start:void 0,end:void 0,duration:void 0};let g;const y=(t,e)=>{const n=Object.values(t);n.sort((t,e)=>e.nb_recommendations-t.nb_recommendations);let a=1;for(const t of n)t.youtubeID=t.id,t.date=e.format("YYYY-MM-DD"),t.moment=e,t.recRank=a,t.day=e.format("DD"),t.id="_"+t.id,delete t.key,f.videos.push(t),a++;return f},b=()=>{let t=[];for(const e of f.videos){let n=t.find(t=>t.youtubeID===e.youtubeID);void 0===n&&(n={id:e.id,youtubeID:e.youtubeID,title:e.title,channel:e.channel,sumRec:0,dates:[]},t.push(n));const a={date:e.date,day:e.day,moment:e.moment,title:e.title,depth:e.depth,dislikes:e.dislikes,likes:e.likes,mult:e.mult,nb_recommendations:e.nb_recommendations,recommendations:e.recommendations,views:e.views,recRank:e.recRank};n.sumRec+=e.nb_recommendations,""===n.title&&(n.title=e.title),n.dates.push(a)}return f.videos=t,f.videos.sort((t,e)=>e.sumRec-t.sumRec),f},k=()=>{const t=[];for(const e of f.videos){let n=e.channel,a=0;for(const t of e.dates)a+=t.nb_recommendations;let l=t.find(t=>t.name===n);void 0===l?(l={name:n,numberVideos:1,numberRecommendations:a},t.push(l)):(l.numberVideos++,l.numberRecommendations+=a)}return t.sort((t,e)=>e.numberRecommendations-t.numberRecommendations),x(t),f.channels=t,f.channels},x=t=>{t.forEach((t,e)=>{if(e<10){let n=O(t.name);if(n)t.colour=n;else{n=m()(p.channelColours[e]).hex();let a=!0,l=1;for(;a;)(a=w(n))&&(n=m()(n).saturate(l).hex(),l++);t.colour=n,f.topChannels.push(t)}}else t.colour=m()("lightgray").hex()})},O=t=>{const e=f.topChannels.find(e=>e.name===t);return e?e.colour:null},w=t=>f.topChannels.find(e=>e.colour===t);var j=t=>{"pt"===t.language?u.a.locale("pt-br"):u.a.locale("en-us"),g=t.terms[0].slug,v.start=u()(t.period.start),v.end=u()(t.period.end),v.duration=v.end.diff(v.start,"days")+1},R=async t=>{const e=Fe.dataset.path;g=t,f.videos=[],f.channels=[];let n=u()(v.start);for(;n<=v.end;){const t=`${e}/video-infos-${g.slug}-${n.format("YYYYMMDD")}.json`;n.add(1,"days");try{const e=await fetch(t);if(200!==e.status)continue;const a=await e.json();if(void 0===a)continue;y(a,n)}catch(t){continue}}return b(),k(),f},D=t=>f.channels.find(e=>e.name==t),M=n(25),T=n.n(M);var A=()=>{const t={title:Fe.meta.title,subtitle:Fe.meta.subtitle},e=T()(t);Object(i.select)("#app").append("div").attr("id","header-section"),Object(i.select)("#header-section").html(e)},C=n(26),L=n.n(C);const E=new l.a;var z={init:()=>{const t={termsTitle:Fe.meta.sideBarTitle,terms:Fe.terms},e=L()(t);Object(i.select)("#app").append("div").attr("id","tm-sidebar-left"),Object(i.select)("#tm-sidebar-left").html(e),Object(i.selectAll)("a").on("click",(function(){const t=Object(i.select)(this).attr("slug"),e=Fe.terms.find(e=>e.slug===t);E.emit("selectTerm",e)}))},event:E},P=n(19),_=n.n(P);let I;u.a.locale("pt-br");const B=()=>{o.a.toggle(Object(i.select)("#small-title").node()).toggle()};E.on("selectTerm",t=>(t=>{I.currentTerm=t.name;const e=_()(I);Object(i.select)("#top-menu").html(e)})(t));var Y=()=>{const t=u()(Fe.period.start).locale("pt").format("DD [de] MMMM"),e=u()(Fe.period.end).locale("pt").format("DD [de] MMMM");I={title:Fe.meta.title,subtitle:Fe.meta.subtitle,currentTerm:Je().name,currentPeriod:`${t} - ${e}`};const n=_()(I);Object(i.select)("#app").append("div").attr("id","top-menu"),Object(i.select)("#top-menu").html(n),o.a.toggle(Object(i.select)("#small-title").node(),{mode:"media",animation:"uk-animation-fade,uk-animation-fade"}),Object(i.select)("#menu-section").on("active",B),Object(i.select)("#menu-section").on("inactive",B),Object(i.select)("#menu-section").on("active",B),Object(i.select)("#menu-section").on("inactive",B)},S=n(27),F=n.n(S),N=n(5),$=n(11),W=n(9),U=n(7);n(17);const H=30,V=250,J=30,Z=10;let q,G,K,Q,X,tt,et,nt,at,lt,it;const st=()=>{X=q.node().getBoundingClientRect().width,et=X-Z-V,tt=300-H-J},ot=()=>{q.html(""),G=q.append("svg").attr("width",et+Z+V).attr("height",tt+H+J),nt=Object(U.scaleLinear)().range([0,et]),at=Object(U.scaleBand)().range([tt,0]),q.append("g").attr("class","x axis").attr("transform","translate(0,"+tt+")"),lt=q.append("g").attr("class","y axis").call(Object(W.axisLeft)(at).tickSize(0).tickFormat("")),K=G.append("g").attr("transform","translate("+Z+","+H+")")},rt=()=>{X!=document.body.clientWidth&&(clearTimeout(it),it=setTimeout(()=>{st(),ot(),ct(Q,"resize")},250))},ct=(t,e)=>{e||(Q=t.videos.slice(0,10)).sort((t,e)=>t.sumRec-e.sumRec),dt(),ut(),ht()},dt=()=>{nt.domain([0,Object($.max)(Q,t=>t.sumRec)]),at.domain(Q.map(t=>t.title)).padding(.2)},ut=()=>lt.call(Object(W.axisBottom)(nt).ticks(0).tickFormat("")),ht=()=>{let t=K.selectAll(".node").remove(),e=(t=K.selectAll(".node").data(Q)).enter().append("g").attr("class","node");e.append("rect").attr("class","bar"),e.append("text").attr("class","bar-title"),e.append("text").attr("class","bar-value"),(t=K.selectAll(".node")).selectAll(".bar").attr("fill",t=>{return Ze(t.channel).colour}).attr("x",0).attr("height",at.bandwidth()).attr("y",t=>at(t.title)).style("cursor","pointer").on("mousemove",t=>qe(t,"video")).on("mouseout",t=>Ge(t,"video")).on("click",t=>Ke(t,"video")).transition().duration(750).delay((t,e)=>100*e).attr("width",t=>nt(t.sumRec)),t.selectAll(".bar-title").attr("x",t=>nt(t.sumRec)).attr("y",t=>at(t.title)).attr("dx",".35em").attr("dy","1.35em").style("font","10px sans-serif").style("opacity",0).text(t=>t.title).transition().duration(750).delay((t,e)=>750+100*e).style("opacity",1),t.selectAll(".bar-value").attr("x",t=>nt(t.sumRec)).attr("y",t=>at(t.title)).attr("dx","-.35em").attr("dy","1.15em").attr("text-anchor","end").style("font","12px sans-serif").style("font-weight","bold").style("fill",t=>{let e=m()(0,0,0,.9).hex();const n=Ze(t.channel);return m.a.contrast(n.colour,e)<4.5&&(e=m()(255,255,255,.85).hex()),e}).style("opacity",0).text(t=>t.sumRec).transition().duration(750).delay((t,e)=>750+100*e).style("opacity",1)};var mt={init:()=>{q=Object(N.select)("#top-videos"),st(),ot(),window.addEventListener("resize",()=>rt())},update:ct,exit:()=>{K.selectAll(".bar").transition().duration(500).attr("width",0),K.selectAll(".bar-title").transition().duration(250).style("opacity",0),K.selectAll(".bar-value").transition().duration(500).attr("x",0).style("opacity",0)},highlightOn:(t,e)=>{K.selectAll(".node").style("opacity",n=>"video"===e?n.youtubeID===t?1:.5:"channel"===e?n.channel===t?1:.5:void 0),K.selectAll(".bar-title").style("font-weight",n=>{if("video"===e){if(n.youtubeID===t)return"bold"}else if("channel"==e&&n.channel===t)return"bold"})},highlightOff:()=>{K.selectAll(".node").style("opacity",1),K.selectAll(".bar-title").style("font-weight","normal")}};const pt=()=>{Object(i.select)("#topvideos-section").select(".spiner").show(),mt.exit()};var ft={init:()=>{const t={title:Ne.mostRecommendedVideos.title},e=F()(t);Object(i.select)("#app").append("div").attr("id","topvideos-section"),Object(i.select)("#topvideos-section").html(e),mt.init(),pt()},load:t=>{Object(i.select)("#topvideos-section").select(".spiner").hide(),mt.update(t)},loading:pt,highlightOn:(t,e)=>mt.highlightOn(t,e),highlightOff:t=>mt.highlightOff(t)},vt=n(28),gt=n.n(vt);n(17);const yt=30,bt=250,kt=30,xt=10;let Ot,wt,jt,Rt,Dt,Mt,Tt,At,Ct,Lt,Et;const zt=()=>{Dt=Ot.node().getBoundingClientRect().width,Tt=Dt-xt-bt,Mt=300-yt-kt},Pt=()=>{Ot.html(""),wt=Ot.append("svg").attr("width",Tt+xt+bt).attr("height",Mt+yt+kt),At=Object(U.scaleLinear)().range([0,Tt]),Ct=Object(U.scaleBand)().range([Mt,0]),Ot.append("g").attr("class","x axis").attr("transform","translate(0,"+Mt+")"),Lt=Ot.append("g").attr("class","y axis").call(Object(W.axisLeft)(Ct).tickSize(0).tickFormat("")),jt=wt.append("g").attr("transform","translate("+xt+","+yt+")")},_t=()=>{Dt!=document.body.clientWidth&&(clearTimeout(Et),Et=setTimeout(()=>{zt(),Pt(),It(Rt,"resize")},250))},It=(t,e)=>{e||(Rt=t.channels.slice(0,10)).sort((t,e)=>t.numberRecommendations-e.numberRecommendations),Bt(),Yt(),St()},Bt=()=>{At.domain([0,Object($.max)(Rt,t=>t.numberRecommendations)]),Ct.domain(Rt.map(t=>t.name)).padding(.2)},Yt=()=>Lt.call(Object(W.axisBottom)(At).ticks(0).tickFormat("")),St=()=>{let t=jt.selectAll(".node").remove(),e=(t=jt.selectAll(".node").data(Rt)).enter().append("g").attr("class","node");e.append("rect").attr("class","bar"),e.append("text").attr("class","bar-title"),e.append("text").attr("class","bar-value"),(t=jt.selectAll(".node")).selectAll(".bar").attr("fill",t=>t.colour).attr("x",0).attr("height",Ct.bandwidth()).attr("y",t=>Ct(t.name)).on("mousemove",t=>qe(t,"channel")).on("mouseout",t=>Ge(t,"channel")).transition().duration(750).delay((t,e)=>100*e).attr("width",t=>At(t.numberRecommendations)),t.selectAll(".bar-title").attr("x",t=>At(t.numberRecommendations)).attr("y",t=>Ct(t.name)).attr("dx",".35em").attr("dy","1.35em").style("font","10px sans-serif").style("opacity",0).text(t=>t.name).transition().duration(750).delay((t,e)=>750+100*e).style("opacity",1),t.selectAll(".bar-value").attr("x",t=>At(t.numberRecommendations)).attr("y",t=>Ct(t.name)).attr("dx","-.35em").attr("dy","1.15em").attr("text-anchor","end").style("font","12px sans-serif").style("font-weight","bold").style("fill",t=>{let e=m()(0,0,0,.9).hex();return m.a.contrast(t.colour,e)<4.5&&(e=m()(255,255,255,.85).hex()),e}).style("opacity",0).text(t=>t.numberRecommendations).transition().duration(750).delay((t,e)=>750+100*e).style("opacity",1)};var Ft={init:()=>{Ot=Object(N.select)("#top-channels"),zt(),Pt(),window.addEventListener("resize",()=>_t())},update:It,exit:()=>{jt.selectAll(".bar").transition().duration(500).attr("width",0),jt.selectAll(".bar-title").transition().duration(250).style("opacity",0),jt.selectAll(".bar-value").transition().duration(500).attr("x",0).style("opacity",0)},highlightOn:t=>{jt.selectAll(".node").style("opacity",e=>e.name===t?1:.5),jt.selectAll(".bar-title").style("font-weight",e=>{if(e.name===t)return"bold"})},highlightOff:()=>{jt.selectAll(".node").style("opacity",1),jt.selectAll(".bar-title").style("font-weight","normal")}};const Nt=()=>{Object(i.select)("#topchannels-section").select(".spiner").show(),Ft.exit()};var $t={init:()=>{const t={title:Ne.mostRecommendedChannels.title},e=gt()(t);Object(i.select)("#channels").append("div").attr("id","topchannels-section"),Object(i.select)("#topchannels-section").html(e),Ft.init(),Nt()},load:t=>{Object(i.select)("#topchannels-section").select(".spiner").hide(),Ft.update(t)},loading:Nt,highlightOn:t=>Ft.highlightOn(t),highlightOff:t=>Ft.highlightOff(t)},Wt=n(29),Ut=n.n(Wt),Ht=n(30),Vt=n(32),Jt=n(20),Zt=n(14),qt=n(31);n(17);const Gt=20,Kt=30,Qt=30,Xt=50,te=[8,6,5,5,4,4,3,3,2,2];let ee,ne,ae,le,ie,se,oe,re,ce,de,ue,he,me,pe,fe,ve,ge=900,ye=800,be=500,ke=Object(Zt.timeParse)("%Y-%m-%d");const xe=()=>{ge!=document.body.clientWidth&&(clearTimeout(ee),ee=setTimeout(()=>{ge=document.body.clientWidth,we(ne,"resize")},250))},Oe=()=>{(()=>{const t=35*(u()(Fe.period.end).diff(u()(Fe.period.start),"days")+1)+Xt+Kt-240,e=o.a.toggle(Object(N.select)("#horizontal-scroll-hint").node());ge<t?(ye=t-Xt-Kt-120,e.isToggled()||e.toggle()):(ye=ge-140-Xt-Kt-120,e.isToggled()&&e.toggle())})(),ke=Object(Zt.timeParse)("%Y-%m-%d"),se=Object(U.scaleOrdinal)(Vt.schemePaired);const t=[];let e=u()(Fe.period.start);for(;e.isBefore(u()(Fe.period.end));e.add(1,"days"))t.push(ke(e.format("YYYY-MM-DD")));(oe=Object(U.scaleTime)().range([0,ye-60-240])).domain(Object($.extent)(t,t=>t)),re=Object(U.scaleLinear)().domain([.5,10.5]).range([0,be]);let n=null;t.length<10&&(n=t.length),ce=Object(W.axisBottom)(oe).tickFormat(Object(Zt.timeFormat)("%d/%m")).tickSize(0).ticks(n),de=Object(W.axisLeft)().scale(re).tickSize(0),ue=Object(Jt.line)().curve(Jt.curveStep)},we=(t,e)=>{const n=t;Oe(),Object(N.select)("#visualization").html(""),(he=Object(N.select)("#visualization").append("svg").style("width",ye+Xt+Kt-240).style("height",be+Gt+Qt).style("max-width","none").append("g").attr("transform","translate("+Xt+","+Gt+")")).append("defs").append("clipPath").attr("id","clip").append("rect").attr("width",ye).attr("height",be),he.append("g").attr("class","x axis").style("font-size",13).attr("transform","translate(0,"+(be+9)+")").call(ce),he.append("g").attr("class","y axis").attr("transform","translate(-10,0)").call(de).append("text").attr("class","titles").attr("transform","rotate(-90)").attr("x",-be/2).attr("y",-35).attr("dy",".71em").style("font-size",14).style("text-anchor","middle").text(Ne.rankflow.yAxisLabel),pe=Object(qt.voronoi)().extent([[-Xt,-Gt],[ye+Kt,be+Qt]]),fe=he.append("g").attr("class","voronoi"),(ve=he.append("g").attr("transform","translate(-100,-100)").attr("class","popUpName").style("pointer-events","none")).append("circle").attr("class","tooltipCircle").attr("r",30.5),ve.append("text").style("font-size",12).attr("class","titles").attr("y",-15),je(n,e)},je=(t,e)=>{"resize"!=e&&(ne=[],ae=[],le=[],ne=(t=>{const e=[];return t.forEach(t=>{let n=!1;t.dates.forEach(t=>{t.recRank<=5&&(n=!0)}),n&&e.push(t)}),e})(t.videos));let n=[];const a=t=>{let e=!1;n.forEach(n=>{n===t&&(e=!0)}),e||n.push(t)};for(const t of ne){let e=ne.indexOf(t);ae[e]=t.id,le[t.id]=e,a(t.channel)}se.domain(n),ue.x(t=>oe(ke(t.date))).y(t=>re(t.recRank)),ie=[];for(const t in ne){const e=ne[t];for(const t of e.dates)t.recRank<=10&&ie.push({id:e.id,title:e.title,date:t.date,moment:t.moment,channel:e.channel,nb_recommendations:t.nb_recommendations,sumRec:e.sumRec,recRank:t.recRank,data:e})}const l=Object(Ht.nest)().key(t=>t.id).rollup(t=>Object($.min)(t,t=>t.recRank)).entries(ie);pe.x(t=>oe(ke(t.date))).y(t=>re(t.recRank));const i=fe.selectAll("path").data(pe.polygons(ie.filter(t=>ke(t.date)>=oe.domain()[0]&ke(t.date)<=oe.domain()[1])));i.exit().remove(),i.enter().append("path").attr("class","voronoiCells").attr("d",t=>"M"+t.join("L")+"Z").style("cursor","pointer").datum(t=>t.data).on("mouseover",t=>qe(t,"rank")).on("mouseout",t=>Ge(t,"rank")).on("click",t=>Ke(t,"rank")),i.attr("d",t=>"M"+t.join("L")+"Z").style("cursor","pointer").datum(t=>t.data).on("mouseover",t=>qe(t,"rank")).on("mouseout",t=>Ge(t,"rank")).on("click",t=>Ke(t,"rank")),N.selection.prototype.moveToFront=function(){return this.each((function(){this.parentNode.appendChild(this)}))},(me=he.selectAll(".focus").data(ne)).exit().remove();const s=me.enter().append("g").attr("class",t=>"focus "+t.id);Object(N.selectAll)(".focus").attr("class",t=>"focus "+t.id);let o=s.append("path").attr("class","line").attr("clip-path","url(#clip)").attr("d",t=>ue(t.dates)).style("pointer-events","none").style("cursor","pointer").style("stroke-linejoin","round").style("opacity",0).style("stroke-width",t=>te[l[le[t.id]].value-1]).style("stroke",t=>Ze(t.channel).colour).transition().duration(750).delay((t,e)=>20*e).style("opacity",.6);(o=me.select("path")).transition().duration(2e3).delay(500).attr("d",t=>ue(t.dates)).style("stroke-width",t=>te[l[le[t.id]].value-1]).style("stroke",t=>Ze(t.channel).colour);let r=s.append("circle").attr("class","circle").attr("clip-path","url(#clip)").attr("cx",t=>oe(ke(t.dates[0].date))).attr("cy",t=>re(t.dates[0].recRank)).attr("r",t=>te[l[le[t.id]].value-1]).style("cursor","pointer").style("opacity",0).style("stroke",t=>Ze(t.channel).colour).style("stroke-width",4).style("fill",t=>-1==t.dates[0].views?"white":Ze(t.channel).colour).transition().duration(750).delay((t,e)=>20*e).style("opacity",1);(r=me.select("circle")).transition().duration(2e3).delay(1500).attr("cx",t=>oe(ke(t.dates[0].date))).attr("cy",t=>re(t.dates[0].recRank)).attr("r",t=>te[l[le[t.id]].value-1]).style("stroke",t=>Ze(t.channel).colour).style("fill",t=>-1==t.dates[0].views?"white":Ze(t.channel).colour)},Re=t=>{Object(N.select)(".popUpName").moveToFront(),ve.attr("transform","translate("+oe(ke(t.date))+","+re(t.recRank)+")");ve.select(".tooltipCircle").style("fill",Ze(t.channel).colour).attr("r",10),ve.select("text").text(t.moment.format("MMM D")+": "+t.title+" (Rank: "+t.recRank+")"),ve.node().getCTM().e-Xt-ve.node().getBBox().width/2<0?ve.select("text").style("text-anchor","start"):ve.node().getCTM().e-Xt+ve.node().getBBox().width/2>ye-120&&ve.select("text").style("text-anchor","end")};var De={init:()=>{ge=document.body.clientWidth,be=500-Gt-Qt,window.addEventListener("resize",()=>xe())},update:we,exit:()=>{if(!he)return;he.selectAll(".focus").transition().duration(250).style("opacity",0)},highlightOn:(t,e)=>{he.selectAll(".focus").style("opacity",n=>"rank"==e?n.youtubeID===t.data.youtubeID?1:.07:"channel"==e?n.channel===t.name?1:.07:"video"==e?n.youtubeID===t.youtubeID?1:.07:void 0),"rank"===e&&Re(t)},highlightOff:()=>{he.selectAll(".focus").style("opacity",1),ve.attr("transform","translate(-100,-100)"),ve.select("text").style("text-anchor","middle")}};const Me=()=>{Object(i.select)("#rankflow-section").select(".spiner").show(),De.exit()};var Te={init:()=>{const t={title:Ne.rankflow.title,showScrollHint:!1,scrollText:Ne.rankflow.scroll},e=Ut()(t);Object(i.select)("#app").append("div").attr("id","rankflow-section"),Object(i.select)("#rankflow-section").html(e),o.a.toggle(Object(i.select)("#horizontal-scroll-hint"),{mode:"media",animation:"uk-animation-fade,uk-animation-fade"}),De.init(),Me()},load:t=>{Object(i.select)("#rankflow-section").select(".spiner").hide(),De.update(t)},loading:Me,highlightOn:(t,e)=>De.highlightOn(t,e),highlightOff:t=>De.highlightOff(t)},Ae=n(33),Ce=n.n(Ae);let Le,Ee={};var ze=()=>{Le=Object(i.select)("#app").append("div").attr("id","modal-video-details").attr("class","uk-modal-container").attr("uk-modal","true")},Pe=(t,e)=>{let n="",a=[];"video"===e?(n=t.youtubeID,a=t.dates):"rank"===e&&(n=t.data.youtubeID,a=t.data.dates),Ee={title:t.title,channel:t.channel,youtubeID:n,dates:a.reverse(),statsLabel:{views:Ne.details.statsLabel.views,likes:Ne.details.statsLabel.likes,dislikes:Ne.details.statsLabel.dislikes,recommendations:Ne.details.statsLabel.recommendations,rankingPosition:Ne.details.statsLabel.rankingPosition}};const l=Ce()(Ee);Le.html(l),o.a.modal(Le.node()).show()};let _e,Ie=!1;const Be=()=>{const t=(Ie=!Ie)?"minus-circle":"plus-circle";o.a.icon("#methodology-toggle-icon",{icon:t})};var Ye=async()=>{await n(70)(`./methodology-${Fe.language}.hbs`).then(({default:t})=>{_e=t});const t={title:Ne.methodology.title},e=_e(t);Object(i.select)("#app").append("div").attr("id","methodology-section"),Object(i.select)("#methodology-section").html(e),Object(i.select)("#methodology-section").on("click",Be),o.a.icon("#methodology-toggle-icon",{icon:"plus-circle"})};n.d(e,"appEvent",(function(){return Se})),n.d(e,"config",(function(){return Fe})),n.d(e,"ui",(function(){return Ne})),n.d(e,"getSelectedTerm",(function(){return Je})),n.d(e,"getChannelByName",(function(){return Ze})),n.d(e,"itemMouseOver",(function(){return qe})),n.d(e,"itemMouseOut",(function(){return Ge})),n.d(e,"showDetails",(function(){return Ke}));const Se=new l.a;let Fe,Ne,$e,We;const Ue=()=>{c()(o.a),i.selection.prototype.show=function(){return this.style("display","initial"),this},i.selection.prototype.hide=function(){return this.style("display","none"),this}},He=async()=>{const t=await fetch("./config/config.json");Fe=await t.json(),$e=Fe.terms,We=$e[0],await Ve(Fe.language)},Ve=async t=>{const e=await fetch(`./config/ui-${t}.json`);Ne=await e.json()};z.event.on("selectTerm",async t=>{We=t,ft.loading(),$t.loading(),Te.loading();const e=await R(We);ft.load(e),$t.load(e),Te.load(e)});const Je=()=>We,Ze=t=>D(t),qe=(t,e)=>{"video"==e?(ft.highlightOn(t.youtubeID,e),$t.highlightOn(t.channel),Te.highlightOn(t,e)):"channel"==e?(ft.highlightOn(t.name,e),$t.highlightOn(t.name),Te.highlightOn(t,e)):"rank"==e&&(ft.highlightOn(t.data.youtubeID,"video"),$t.highlightOn(t.channel,e),Te.highlightOn(t,e))},Ge=(t,e)=>{"video"==e?(ft.highlightOff(t.youtubeID),$t.highlightOff(t.channel),Te.highlightOff(t)):"channel"==e?(ft.highlightOff(t.name),$t.highlightOff(t.name),Te.highlightOff(t)):"rank"==e&&(ft.highlightOff(t.name),$t.highlightOff(t.name),Te.highlightOff(t))},Ke=(t,e)=>{Pe(t,e)};(async()=>{Ue(),await He(),A(),z.init(),Y(),ft.init(),$t.init(),Te.init(),Ye(),ze(),j(Fe);const t=await R(We);ft.load(t),$t.load(t),Te.load(t)})();e.default={config:Fe,appEvent:Se,getSelectedTerm:Je,getChannelByName:Ze,itemMouseOver:qe,itemMouseOut:Ge,showDetails:Ke}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,